portal.azure.com

created 3 virtual machines named
a. ansible-controller
b. ansible-target1
c. ansible-target2

having username=azureuser and password=azureuser@123

connect to ansible-controller using ssh and install ansible in the vm.
also insall sshpass, if required.

check the accessibility of ansible-target1 and ansible-target2 from ansible-controller.

create a new folder
mkdir test-project

change the directory
cd test-project

create an inventory.txt file

cat > inventory.txt
ansible-target1 ansible_host=<publicip> ansible_ssh_password=azureuser@123 ansible_user=azureuser
ansible-target2 ansible_host=<publicip> ansible_ssh_password=azureuser@123 ansible_user=azureuser


cat inventory.txt to view the contents

to test the working of ansible
ansible --version

output looks like:
ansible [core 2.11.12]
  config file = None
  configured module search path = ['/root/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/local/lib/python3.6/site-packages/ansible
  ansible collection location = /root/.ansible/collections:/usr/share/ansible/collections
  executable location = /usr/local/bin/ansible
  python version = 3.6.8 (default, Aug  3 2021, 06:54:29) [GCC 8.3.1 20191121 (Red Hat 8.3.1-5)]
  jinja version = 2.10.1
  libyaml = True


ansible ansible-target1 -m ping -i inventory.txt

output:
ansible-target1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false,
    "ping": "pong"
}


ansible ansible-target2 -m ping -i inventory.txt

output:
ansible-target2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false,
    "ping": "pong"
}


ansible all -m ping -i inventory.txt

output:
ansible-target2 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false,
    "ping": "pong"
}
ansible-target1 | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/libexec/platform-python"
    },
    "changed": false,
    "ping": "pong"
}


create a playbook named playbook-pingtest.yaml

-
 name: Test the connectivity of target servers
 hosts: all
 tasks:
  - name: Ping Test
    ping:


running the playbook named playbook-pingtest.yaml

ansible-playbook playbook-pingtest.yaml -i inventory.txt

output:
PLAY [Test the connectivity of target servers] *********************************

TASK [Gathering Facts] *********************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Ping Test] ***************************************************************
ok: [ansible-target1]
ok: [ansible-target2]

PLAY RECAP *********************************************************************
ansible-target1            : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


create a playbook named playbook-copyfile.yaml

-
 name: Copy file to target servers
 hosts: all
 tasks:
  - name: Copy File
    copy:
     src: /tmp/test-file.txt
     dest: /tmp/test-file.txt



running the playbook named playbook-copyfile.yaml

ansible-playbook playbook-copyfile.yaml -i inventory.txt

output:
PLAY [Copy file to target servers] *********************************************

TASK [Gathering Facts] *********************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Copy File] ***************************************************************
changed: [ansible-target2]
changed: [ansible-target1]

PLAY RECAP *********************************************************************
ansible-target1            : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0



running the playbook named playbook-copyfile again

ansible-playbook playbook-copyfile.yaml-i inventory.txt

output:
PLAY [Copy file to target servers] *********************************************

TASK [Gathering Facts] *********************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Copy File] ***************************************************************
ok: [ansible-target2]
ok: [ansible-target1]

PLAY RECAP *********************************************************************
ansible-target1            : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0



create a playbook named playbook-test1.yaml

-
 name: play1
 hosts: all
 tasks:
  - name: Execute Command 'date'
    command: date

  - name: Display resolv.conf contents
    command: cat /etc/resolv.conf

  - name: Display resolv.conf contents
    command: cat resolv.conf chdir=/etc



running the playbook named playbook-test1.yaml

ansible-playbook playbook-test1.yaml -i inventory.txt

output:
PLAY [play1] *******************************************************************

TASK [Gathering Facts] *********************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Execute Command 'date'] **************************************************
changed: [ansible-target1]
changed: [ansible-target2]

TASK [Display resolv.conf contents] ********************************************
changed: [ansible-target1]
changed: [ansible-target2]

TASK [Display resolv.conf contents] ********************************************
changed: [ansible-target1]
changed: [ansible-target2]

PLAY RECAP *********************************************************************
ansible-target1            : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=4    changed=3    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


create a playbook named playbook-httpd.yaml

-
 name: Install httpd and start the service
 hosts: all
 become: yes
 become_user: root
 tasks:
  - name: Install httpd
    yum:
     name: httpd
     state: latest

  - name: Start httpd service
    service:
     name: httpd
     state: started

running the playbook named playbook-httpd.yaml

ansible-playbook playbook-httpd.yaml


output:
PLAY [Install httpd and start the service] **************************************************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************************************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Install httpd] ************************************************************************************************************************************************************************
changed: [ansible-target1]
changed: [ansible-target2]

TASK [Start httpd service] ******************************************************************************************************************************************************************
changed: [ansible-target1]
changed: [ansible-target2]

PLAY RECAP **********************************************************************************************************************************************************************************
ansible-target1            : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=3    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


create playbook named playbook-httpdremove.yaml

-
 name: Removing httpd
 hosts: all
 become: true
 tasks:
  - name: Remove httpd
    yum:
     name: httpd
     autoremove: yes
     state: absent


running the playbook named playbook-httpdremove.yaml


output:
PLAY [Removing httpd] ***********************************************************************************************************************************************************************

TASK [Gathering Facts] **********************************************************************************************************************************************************************
ok: [ansible-target1]
ok: [ansible-target2]

TASK [Remove httpd] *************************************************************************************************************************************************************************
changed: [ansible-target1]
changed: [ansible-target2]

PLAY RECAP **********************************************************************************************************************************************************************************
ansible-target1            : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
ansible-target2            : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0


